name: "publish"

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            label: linux
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            label: linux
            target: i686-unknown-linux-gnu
          - os: macos-latest
            label: macos
            target: x86_64-apple-darwin
          - os: macos-latest
            label: macos
            target: aarch64-apple-darwin
          - os: windows-latest
            label: windows
            target: i686-pc-windows-msvc
          - os: windows-latest
            label: windows
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 16
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: setup for linux
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt install -y \
          libwebkit2gtk-4.0-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          patchelf \
          librsvg2-dev \
          libayatana-appindicator3-dev
    - name: setup for linux 32-bit
      if: matrix.os == 'ubuntu-22.04' && matrix.target == 'i686-unknown-linux-gnu'
      run: |
        sudo add-apt-repository universe
        sudo dpkg --add-architecture i386
        sudo apt update
        sudo apt install -y \
          gcc-multilib \
          g++-multilib \
          libwebkit2gtk-4.0-dev:i386 \
          libgtk-3-dev:i386 \
          libssl-dev:i386 \
          librsvg2-dev:i386
        echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV

    - name: rustup add target
      run: |
        rustup target add ${{ matrix.target }}
      shell: bash

    - name: build app
      run: |
        npm install
        npm run build

    - uses: liudonghua123/tauri-action@v0
      if: contains(github.ref, 'tags')
      name: package and deploy app
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        distPath: ../build
        tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
        releaseName: "scratch-gui v__VERSION__"
        releaseBody: "See the assets to download this version and install."
        bundleIdentifier: com.scratch.app
        args: -t ${{ matrix.target }} -c {"package":{"version":"${{ github.ref_name }}"}}
        target: ${{ matrix.target }}
        releaseDraft: false
        prerelease: false
